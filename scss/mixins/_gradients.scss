// Horizontal gradient, from left to right
// https://github.com/sturobson/Sassifaction/blob/master/sass/base/mixins/_gradients.scss
//
// Creates two color stops, start and end, by specifying a color and position for each color stop.
// Color stops are not available in IE9 and below.

@mixin gradient-horizontal($start-color: #555, $end-color: #333, $start-percent: 0%, $end-percent: 100%) {
  background-color: $start-color;
  background-image: -webkit-gradient(linear, $start-percent top, $end-percent top, from($start-color), to($end-color));
  background-image: -webkit-linear-gradient(left, color-stop($start-color $start-percent), color-stop($end-color $end-percent));
  background-image: -moz-linear-gradient(left, $start-color $start-percent, $end-color $end-percent);
  background-image:  linear-gradient(to right, $start-color $start-percent, $end-color $end-percent);
  background-repeat: repeat-x;
  filter: progid:DXImageTransform.Microsoft.gradient(startColorstr='#{ie-hex-str($start-color)}', endColorstr='#{ie-hex-str($end-color)}', GradientType=1);
}

// Vertical gradient, from top to bottom
//
// Creates two color stops, start and end, by specifying a color and position for each color stop.
// Color stops are not available in IE9 and below.

@mixin gradient-vertical($start-color: #555, $end-color: #333, $start-percent: 0%, $end-percent: 100%) {
  background-color: $start-color;
  background-image: -webkit-gradient(linear, left $start-percent, left $end-percent, from($start-color), to($end-color));
  background-image: -webkit-linear-gradient(top, $start-color $start-percent, $end-color $end-percent);
  background-image:  -moz-linear-gradient(top, $start-color $start-percent, $end-color $end-percent);
  background-image: linear-gradient(to bottom, $start-color $start-percent, $end-color $end-percent);
  background-repeat: repeat-x;
  filter: progid:DXImageTransform.Microsoft.gradient(startColorstr='#{ie-hex-str($start-color)}', endColorstr='#{ie-hex-str($end-color)}', GradientType=0);
}

@mixin gradient-directional($start-color: #555, $end-color: #333, $deg: 45deg) {
  background-color: $start-color;
  background-repeat: repeat-x;
  background-image: -webkit-linear-gradient($deg, $start-color, $end-color);
  background-image: -moz-linear-gradient($deg, $start-color, $end-color);
  background-image: linear-gradient($deg, $start-color, $end-color);
}

@mixin gradient-horizontal-three-colors($start-color: #00b3ee, $mid-color: #7a43b6, $color-stop: 50%, $end-color: #c3325f) {
  background-color: $start-color;
  background-image: -webkit-gradient(left, linear, 0 0, 0 100%, from($start-color), color-stop($color-stop, $mid-color), to($end-color));
  background-image: -webkit-linear-gradient(left, $start-color, $mid-color $color-stop, $end-color);
  background-image: -moz-linear-gradient(left, $start-color, $mid-color $color-stop, $end-color);
  background-image: linear-gradient(to right, $start-color, $mid-color $color-stop, $end-color);
  background-repeat: no-repeat;
  filter: progid:DXImageTransform.Microsoft.gradient(startColorstr='#{ie-hex-str($start-color)}', endColorstr='#{ie-hex-str($end-color)}', GradientType=1);
}

@mixin gradient-vertical-three-colors($start-color: #00b3ee, $mid-color: #7a43b6, $color-stop: 50%, $end-color: #c3325f) {
  background-color: $start-color;
  background-image: -webkit-gradient(linear, 0 0, 0 100%, from($start-color), color-stop($color-stop, $mid-color), to($end-color));
  background-image: -webkit-linear-gradient($start-color, $mid-color $color-stop, $end-color);
  background-image: -moz-linear-gradient(top, $start-color, $mid-color $color-stop, $end-color);
  background-image: linear-gradient($start-color, $mid-color $color-stop, $end-color);
  background-repeat: no-repeat;
  filter: progid:DXImageTransform.Microsoft.gradient(startColorstr='#{ie-hex-str($start-color)}', endColorstr='#{ie-hex-str($end-color)}', GradientType=0);
}

@mixin gradient-radial($inner-color: #555, $outer-color: #333) {
  background-color: $start-color;
  background-image: -webkit-gradient(radial, center center, 0, center center, 460, from($inner-color), to($outer-color));
  background-image: -webkit-radial-gradient(circle, $inner-color, $outer-color);
  background-image: -moz-radial-gradient(circle, $inner-color, $outer-color);
  background-image: radial-gradient(circle, $inner-color, $outer-color);
  background-repeat: no-repeat;
}

@mixin gradient-striped($color: rgba(255,255,255,.15), $angle: 45deg) {
  background-image: -webkit-gradient(linear, 0 100%, 100% 0, color-stop(.25, $color), color-stop(.25, transparent), color-stop(.5, transparent), color-stop(.5, $color), color-stop(.75, $color), color-stop(.75, transparent), to(transparent));
  background-image: -webkit-linear-gradient($angle, $color 25%, transparent 25%, transparent 50%, $color 50%, $color 75%, transparent 75%, transparent);
  background-image: -moz-linear-gradient($angle, $color 25%, transparent 25%, transparent 50%, $color 50%, $color 75%, transparent 75%, transparent);
  background-image: linear-gradient($angle, $color 25%, transparent 25%, transparent 50%, $color 50%, $color 75%, transparent 75%, transparent);
}


// A mixin to turn a regular gradient into a striped one
// CodePen: http://codepen.io/HugoGiraudel/pen/KxzrH
// Article: http://css-tricks.com/striped-background-gradients

@mixin stripes($colors, $direction: "to bottom") {  

  $stripes : 100% / length($colors);
  $firstCol : nth($colors, 1);
  $auto : if( type-of($firstCol) == list, false, true );
  $gradient : ();

  @for $i from 1 through length($colors) {
    $item : nth($colors, $i);
    $dump : ();

    @if $auto == true {
      $dump : $item $stripes * ($i - 1), $item $stripes * $i;
    } @else {

      @if $i > 1 {
        $prev : nth($colors, $i - 1);
        $dump : $dump, nth($item, 1) nth($prev, 2);
      }

      $dump : $dump, $item;
    }

    $gradient : join($gradient, $dump, comma);
  }

  background: unquote('linear-gradient(') #{$direction} unquote(',') $gradient unquote(')');
}


// @demo1
// Passing a collection of color-stops to the mixin
// Direction is ommited since default is top to bottom
//
// If you have two lists (one of colors, one of stops)
// Merge them with zip() (color list first)
//
// $colors: #1abc9c, #27ae60, #3498db, #16a085, #2980b9, #34495e, #1abc9c;
// $stops : 18%, 33%, 46%, 55%, 65%, 83%, 100%; 
//
// $argument: zip($colors, $stops);

// @example
// h1 { @include stripes($color-stops-1); }
$color-stops-1: #1abc9c 18%, #27ae60 33%, #3498db 46%, #16a085 55%, #2980b9 65%, #34495e 83%, #1abc9c 100%;


// @demo2 (less useful)
// Creating a collection of color-stops in a loop with hsl()
// Also known as "pooping a rainbow"

// @example
// .demo-2 {
//  $colors: (); // Contains colors
//  $stops:  (); // Contains stops 

//  @for $i from 1 through 15 {
//    $colors : append($colors, hsl($i*10, 75%, 50%));
//    $stops  : append($stops , unquote('#{$i*6}%'));
//  }

//  $color-stops-2: zip($colors, $stops); // Zipping both lists

//  @include stripes($color-stops-2, "to right");
//  If you want all stripes to have the same size,
//  you can pass a list of colors without stops
//  like $colors
// }